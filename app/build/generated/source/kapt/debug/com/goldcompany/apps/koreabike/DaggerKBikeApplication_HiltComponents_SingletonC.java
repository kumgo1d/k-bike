// Generated by Dagger (https://dagger.dev).
package com.goldcompany.apps.koreabike;

import android.app.Activity;
import android.app.Service;
import android.view.View;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import com.goldcompany.apps.koreabike.api.KakaoApiService;
import com.goldcompany.apps.koreabike.api.NaverApiService;
import com.goldcompany.apps.koreabike.data.KBikeLocalDataSource;
import com.goldcompany.apps.koreabike.data.KBikeRemoteDataSource;
import com.goldcompany.apps.koreabike.data.KBikeRepository;
import com.goldcompany.apps.koreabike.db.KBikeDatabase;
import com.goldcompany.apps.koreabike.db.history_address.UserHistoryAddressDAO;
import com.goldcompany.apps.koreabike.di.DatabaseModule;
import com.goldcompany.apps.koreabike.di.DatabaseModule_ProvideAppDatabaseFactory;
import com.goldcompany.apps.koreabike.di.DatabaseModule_ProvideUserHistoryDaoFactory;
import com.goldcompany.apps.koreabike.di.NetworkModule;
import com.goldcompany.apps.koreabike.di.NetworkModule_ProvideKakaoApiServiceFactory;
import com.goldcompany.apps.koreabike.di.NetworkModule_ProvideNaverApiServiceFactory;
import com.goldcompany.apps.koreabike.ui.bike_map.BikeMapFragment;
import com.goldcompany.apps.koreabike.ui.bike_map.BikeMapViewModel;
import com.goldcompany.apps.koreabike.ui.bike_map.BikeMapViewModel_HiltModules_KeyModule_ProvideFactory;
import com.goldcompany.apps.koreabike.ui.history_place.HistoryPlaceFragment;
import com.goldcompany.apps.koreabike.ui.history_place.HistoryPlaceViewModel;
import com.goldcompany.apps.koreabike.ui.history_place.HistoryPlaceViewModel_HiltModules_KeyModule_ProvideFactory;
import com.goldcompany.apps.koreabike.ui.navigation.NavigationFragment;
import com.goldcompany.apps.koreabike.ui.navigation.NavigationViewModel;
import com.goldcompany.apps.koreabike.ui.navigation.NavigationViewModel_HiltModules_KeyModule_ProvideFactory;
import com.goldcompany.apps.koreabike.ui.search_address.SearchAddressFragment;
import com.goldcompany.apps.koreabike.ui.search_address.SearchAddressViewModel;
import com.goldcompany.apps.koreabike.ui.search_address.SearchAddressViewModel_HiltModules_KeyModule_ProvideFactory;
import dagger.hilt.android.ActivityRetainedLifecycle;
import dagger.hilt.android.flags.HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule;
import dagger.hilt.android.internal.builders.ActivityComponentBuilder;
import dagger.hilt.android.internal.builders.ActivityRetainedComponentBuilder;
import dagger.hilt.android.internal.builders.FragmentComponentBuilder;
import dagger.hilt.android.internal.builders.ServiceComponentBuilder;
import dagger.hilt.android.internal.builders.ViewComponentBuilder;
import dagger.hilt.android.internal.builders.ViewModelComponentBuilder;
import dagger.hilt.android.internal.builders.ViewWithFragmentComponentBuilder;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories;
import dagger.hilt.android.internal.lifecycle.DefaultViewModelFactories_InternalFactoryFactory_Factory;
import dagger.hilt.android.internal.managers.ActivityRetainedComponentManager_Lifecycle_Factory;
import dagger.hilt.android.internal.modules.ApplicationContextModule;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideApplicationFactory;
import dagger.hilt.android.internal.modules.ApplicationContextModule_ProvideContextFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.SetBuilder;
import java.util.Collections;
import java.util.Map;
import java.util.Set;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerKBikeApplication_HiltComponents_SingletonC extends KBikeApplication_HiltComponents.SingletonC {
  private final ApplicationContextModule applicationContextModule;

  private final NetworkModule networkModule;

  private final DatabaseModule databaseModule;

  private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC = this;

  private Provider<KakaoApiService> provideKakaoApiServiceProvider;

  private Provider<NaverApiService> provideNaverApiServiceProvider;

  private Provider<KBikeRemoteDataSource> kBikeRemoteDataSourceProvider;

  private Provider<KBikeDatabase> provideAppDatabaseProvider;

  private Provider<KBikeLocalDataSource> kBikeLocalDataSourceProvider;

  private Provider<KBikeRepository> kBikeRepositoryProvider;

  private DaggerKBikeApplication_HiltComponents_SingletonC(
      ApplicationContextModule applicationContextModuleParam, DatabaseModule databaseModuleParam,
      NetworkModule networkModuleParam) {
    this.applicationContextModule = applicationContextModuleParam;
    this.networkModule = networkModuleParam;
    this.databaseModule = databaseModuleParam;
    initialize(applicationContextModuleParam, databaseModuleParam, networkModuleParam);

  }

  public static Builder builder() {
    return new Builder();
  }

  private KBikeRemoteDataSource kBikeRemoteDataSource() {
    return new KBikeRemoteDataSource(provideKakaoApiServiceProvider.get(), provideNaverApiServiceProvider.get());
  }

  private KBikeDatabase kBikeDatabase() {
    return DatabaseModule_ProvideAppDatabaseFactory.provideAppDatabase(databaseModule, ApplicationContextModule_ProvideContextFactory.provideContext(applicationContextModule));
  }

  private UserHistoryAddressDAO userHistoryAddressDAO() {
    return DatabaseModule_ProvideUserHistoryDaoFactory.provideUserHistoryDao(databaseModule, provideAppDatabaseProvider.get());
  }

  private KBikeLocalDataSource kBikeLocalDataSource() {
    return new KBikeLocalDataSource(userHistoryAddressDAO());
  }

  private KBikeRepository kBikeRepository() {
    return new KBikeRepository(kBikeRemoteDataSourceProvider.get(), kBikeLocalDataSourceProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApplicationContextModule applicationContextModuleParam,
      final DatabaseModule databaseModuleParam, final NetworkModule networkModuleParam) {
    this.provideKakaoApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<KakaoApiService>(singletonC, 2));
    this.provideNaverApiServiceProvider = DoubleCheck.provider(new SwitchingProvider<NaverApiService>(singletonC, 3));
    this.kBikeRemoteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<KBikeRemoteDataSource>(singletonC, 1));
    this.provideAppDatabaseProvider = DoubleCheck.provider(new SwitchingProvider<KBikeDatabase>(singletonC, 5));
    this.kBikeLocalDataSourceProvider = DoubleCheck.provider(new SwitchingProvider<KBikeLocalDataSource>(singletonC, 4));
    this.kBikeRepositoryProvider = DoubleCheck.provider(new SwitchingProvider<KBikeRepository>(singletonC, 0));
  }

  @Override
  public void injectKBikeApplication(KBikeApplication kBikeApplication) {
  }

  @Override
  public Set<Boolean> getDisableFragmentGetContextFix() {
    return Collections.<Boolean>emptySet();
  }

  @Override
  public ActivityRetainedComponentBuilder retainedComponentBuilder() {
    return new ActivityRetainedCBuilder(singletonC);
  }

  @Override
  public ServiceComponentBuilder serviceComponentBuilder() {
    return new ServiceCBuilder(singletonC);
  }

  public static final class Builder {
    private ApplicationContextModule applicationContextModule;

    private DatabaseModule databaseModule;

    private NetworkModule networkModule;

    private Builder() {
    }

    public Builder applicationContextModule(ApplicationContextModule applicationContextModule) {
      this.applicationContextModule = Preconditions.checkNotNull(applicationContextModule);
      return this;
    }

    public Builder databaseModule(DatabaseModule databaseModule) {
      this.databaseModule = Preconditions.checkNotNull(databaseModule);
      return this;
    }

    /**
     * @deprecated This module is declared, but an instance is not used in the component. This method is a no-op. For more, see https://dagger.dev/unused-modules.
     */
    @Deprecated
    public Builder hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule(
        HiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule) {
      Preconditions.checkNotNull(hiltWrapper_FragmentGetContextFix_FragmentGetContextFixModule);
      return this;
    }

    public Builder networkModule(NetworkModule networkModule) {
      this.networkModule = Preconditions.checkNotNull(networkModule);
      return this;
    }

    public KBikeApplication_HiltComponents.SingletonC build() {
      Preconditions.checkBuilderRequirement(applicationContextModule, ApplicationContextModule.class);
      if (databaseModule == null) {
        this.databaseModule = new DatabaseModule();
      }
      if (networkModule == null) {
        this.networkModule = new NetworkModule();
      }
      return new DaggerKBikeApplication_HiltComponents_SingletonC(applicationContextModule, databaseModule, networkModule);
    }
  }

  private static final class ActivityRetainedCBuilder implements KBikeApplication_HiltComponents.ActivityRetainedC.Builder {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private ActivityRetainedCBuilder(DaggerKBikeApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public KBikeApplication_HiltComponents.ActivityRetainedC build() {
      return new ActivityRetainedCImpl(singletonC);
    }
  }

  private static final class ActivityCBuilder implements KBikeApplication_HiltComponents.ActivityC.Builder {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private Activity activity;

    private ActivityCBuilder(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ActivityCBuilder activity(Activity activity) {
      this.activity = Preconditions.checkNotNull(activity);
      return this;
    }

    @Override
    public KBikeApplication_HiltComponents.ActivityC build() {
      Preconditions.checkBuilderRequirement(activity, Activity.class);
      return new ActivityCImpl(singletonC, activityRetainedCImpl, activity);
    }
  }

  private static final class FragmentCBuilder implements KBikeApplication_HiltComponents.FragmentC.Builder {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private Fragment fragment;

    private FragmentCBuilder(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public FragmentCBuilder fragment(Fragment fragment) {
      this.fragment = Preconditions.checkNotNull(fragment);
      return this;
    }

    @Override
    public KBikeApplication_HiltComponents.FragmentC build() {
      Preconditions.checkBuilderRequirement(fragment, Fragment.class);
      return new FragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragment);
    }
  }

  private static final class ViewWithFragmentCBuilder implements KBikeApplication_HiltComponents.ViewWithFragmentC.Builder {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private View view;

    private ViewWithFragmentCBuilder(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;
    }

    @Override
    public ViewWithFragmentCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public KBikeApplication_HiltComponents.ViewWithFragmentC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewWithFragmentCImpl(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl, view);
    }
  }

  private static final class ViewCBuilder implements KBikeApplication_HiltComponents.ViewC.Builder {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private View view;

    private ViewCBuilder(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
    }

    @Override
    public ViewCBuilder view(View view) {
      this.view = Preconditions.checkNotNull(view);
      return this;
    }

    @Override
    public KBikeApplication_HiltComponents.ViewC build() {
      Preconditions.checkBuilderRequirement(view, View.class);
      return new ViewCImpl(singletonC, activityRetainedCImpl, activityCImpl, view);
    }
  }

  private static final class ViewModelCBuilder implements KBikeApplication_HiltComponents.ViewModelC.Builder {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private SavedStateHandle savedStateHandle;

    private ViewModelCBuilder(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
    }

    @Override
    public ViewModelCBuilder savedStateHandle(SavedStateHandle handle) {
      this.savedStateHandle = Preconditions.checkNotNull(handle);
      return this;
    }

    @Override
    public KBikeApplication_HiltComponents.ViewModelC build() {
      Preconditions.checkBuilderRequirement(savedStateHandle, SavedStateHandle.class);
      return new ViewModelCImpl(singletonC, activityRetainedCImpl, savedStateHandle);
    }
  }

  private static final class ServiceCBuilder implements KBikeApplication_HiltComponents.ServiceC.Builder {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private Service service;

    private ServiceCBuilder(DaggerKBikeApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;
    }

    @Override
    public ServiceCBuilder service(Service service) {
      this.service = Preconditions.checkNotNull(service);
      return this;
    }

    @Override
    public KBikeApplication_HiltComponents.ServiceC build() {
      Preconditions.checkBuilderRequirement(service, Service.class);
      return new ServiceCImpl(singletonC, service);
    }
  }

  private static final class ViewWithFragmentCImpl extends KBikeApplication_HiltComponents.ViewWithFragmentC {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl;

    private final ViewWithFragmentCImpl viewWithFragmentCImpl = this;

    private ViewWithFragmentCImpl(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        FragmentCImpl fragmentCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;
      this.fragmentCImpl = fragmentCImpl;


    }
  }

  private static final class FragmentCImpl extends KBikeApplication_HiltComponents.FragmentC {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final FragmentCImpl fragmentCImpl = this;

    private FragmentCImpl(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl,
        Fragment fragmentParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }

    @Override
    public void injectBikeMapFragment(BikeMapFragment bikeMapFragment) {
    }

    @Override
    public void injectHistoryPlaceFragment(HistoryPlaceFragment historyPlaceFragment) {
    }

    @Override
    public void injectNavigationFragment(NavigationFragment navigationFragment) {
    }

    @Override
    public void injectSearchAddressFragment(SearchAddressFragment searchAddressFragment) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return activityCImpl.getHiltInternalFactoryFactory();
    }

    @Override
    public ViewWithFragmentComponentBuilder viewWithFragmentComponentBuilder() {
      return new ViewWithFragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl, fragmentCImpl);
    }
  }

  private static final class ViewCImpl extends KBikeApplication_HiltComponents.ViewC {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl;

    private final ViewCImpl viewCImpl = this;

    private ViewCImpl(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, ActivityCImpl activityCImpl, View viewParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;
      this.activityCImpl = activityCImpl;


    }
  }

  private static final class ActivityCImpl extends KBikeApplication_HiltComponents.ActivityC {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ActivityCImpl activityCImpl = this;

    private ActivityCImpl(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, Activity activityParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;


    }

    @Override
    public void injectMainActivity(MainActivity mainActivity) {
    }

    @Override
    public DefaultViewModelFactories.InternalFactoryFactory getHiltInternalFactoryFactory() {
      return DefaultViewModelFactories_InternalFactoryFactory_Factory.newInstance(ApplicationContextModule_ProvideApplicationFactory.provideApplication(singletonC.applicationContextModule), getViewModelKeys(), new ViewModelCBuilder(singletonC, activityRetainedCImpl));
    }

    @Override
    public Set<String> getViewModelKeys() {
      return SetBuilder.<String>newSetBuilder(4).add(BikeMapViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(HistoryPlaceViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(NavigationViewModel_HiltModules_KeyModule_ProvideFactory.provide()).add(SearchAddressViewModel_HiltModules_KeyModule_ProvideFactory.provide()).build();
    }

    @Override
    public ViewModelComponentBuilder getViewModelComponentBuilder() {
      return new ViewModelCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public FragmentComponentBuilder fragmentComponentBuilder() {
      return new FragmentCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }

    @Override
    public ViewComponentBuilder viewComponentBuilder() {
      return new ViewCBuilder(singletonC, activityRetainedCImpl, activityCImpl);
    }
  }

  private static final class ViewModelCImpl extends KBikeApplication_HiltComponents.ViewModelC {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl;

    private final ViewModelCImpl viewModelCImpl = this;

    private Provider<BikeMapViewModel> bikeMapViewModelProvider;

    private Provider<HistoryPlaceViewModel> historyPlaceViewModelProvider;

    private Provider<NavigationViewModel> navigationViewModelProvider;

    private Provider<SearchAddressViewModel> searchAddressViewModelProvider;

    private ViewModelCImpl(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        ActivityRetainedCImpl activityRetainedCImpl, SavedStateHandle savedStateHandleParam) {
      this.singletonC = singletonC;
      this.activityRetainedCImpl = activityRetainedCImpl;

      initialize(savedStateHandleParam);

    }

    private BikeMapViewModel bikeMapViewModel() {
      return new BikeMapViewModel(singletonC.kBikeRepositoryProvider.get());
    }

    private HistoryPlaceViewModel historyPlaceViewModel() {
      return new HistoryPlaceViewModel(singletonC.kBikeRepositoryProvider.get());
    }

    private NavigationViewModel navigationViewModel() {
      return new NavigationViewModel(singletonC.kBikeRepositoryProvider.get());
    }

    private SearchAddressViewModel searchAddressViewModel() {
      return new SearchAddressViewModel(singletonC.kBikeRepositoryProvider.get());
    }

    @SuppressWarnings("unchecked")
    private void initialize(final SavedStateHandle savedStateHandleParam) {
      this.bikeMapViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 0);
      this.historyPlaceViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 1);
      this.navigationViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 2);
      this.searchAddressViewModelProvider = new SwitchingProvider<>(singletonC, activityRetainedCImpl, viewModelCImpl, 3);
    }

    @Override
    public Map<String, Provider<ViewModel>> getHiltViewModelMap() {
      return MapBuilder.<String, Provider<ViewModel>>newMapBuilder(4).put("com.goldcompany.apps.koreabike.ui.bike_map.BikeMapViewModel", (Provider) bikeMapViewModelProvider).put("com.goldcompany.apps.koreabike.ui.history_place.HistoryPlaceViewModel", (Provider) historyPlaceViewModelProvider).put("com.goldcompany.apps.koreabike.ui.navigation.NavigationViewModel", (Provider) navigationViewModelProvider).put("com.goldcompany.apps.koreabike.ui.search_address.SearchAddressViewModel", (Provider) searchAddressViewModelProvider).build();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final ViewModelCImpl viewModelCImpl;

      private final int id;

      SwitchingProvider(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, ViewModelCImpl viewModelCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.viewModelCImpl = viewModelCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // com.goldcompany.apps.koreabike.ui.bike_map.BikeMapViewModel 
          return (T) viewModelCImpl.bikeMapViewModel();

          case 1: // com.goldcompany.apps.koreabike.ui.history_place.HistoryPlaceViewModel 
          return (T) viewModelCImpl.historyPlaceViewModel();

          case 2: // com.goldcompany.apps.koreabike.ui.navigation.NavigationViewModel 
          return (T) viewModelCImpl.navigationViewModel();

          case 3: // com.goldcompany.apps.koreabike.ui.search_address.SearchAddressViewModel 
          return (T) viewModelCImpl.searchAddressViewModel();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ActivityRetainedCImpl extends KBikeApplication_HiltComponents.ActivityRetainedC {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ActivityRetainedCImpl activityRetainedCImpl = this;

    @SuppressWarnings("rawtypes")
    private Provider lifecycleProvider;

    private ActivityRetainedCImpl(DaggerKBikeApplication_HiltComponents_SingletonC singletonC) {
      this.singletonC = singletonC;

      initialize();

    }

    @SuppressWarnings("unchecked")
    private void initialize() {
      this.lifecycleProvider = DoubleCheck.provider(new SwitchingProvider<Object>(singletonC, activityRetainedCImpl, 0));
    }

    @Override
    public ActivityComponentBuilder activityComponentBuilder() {
      return new ActivityCBuilder(singletonC, activityRetainedCImpl);
    }

    @Override
    public ActivityRetainedLifecycle getActivityRetainedLifecycle() {
      return (ActivityRetainedLifecycle) lifecycleProvider.get();
    }

    private static final class SwitchingProvider<T> implements Provider<T> {
      private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

      private final ActivityRetainedCImpl activityRetainedCImpl;

      private final int id;

      SwitchingProvider(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
          ActivityRetainedCImpl activityRetainedCImpl, int id) {
        this.singletonC = singletonC;
        this.activityRetainedCImpl = activityRetainedCImpl;
        this.id = id;
      }

      @SuppressWarnings("unchecked")
      @Override
      public T get() {
        switch (id) {
          case 0: // dagger.hilt.android.internal.managers.ActivityRetainedComponentManager.Lifecycle 
          return (T) ActivityRetainedComponentManager_Lifecycle_Factory.newInstance();

          default: throw new AssertionError(id);
        }
      }
    }
  }

  private static final class ServiceCImpl extends KBikeApplication_HiltComponents.ServiceC {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final ServiceCImpl serviceCImpl = this;

    private ServiceCImpl(DaggerKBikeApplication_HiltComponents_SingletonC singletonC,
        Service serviceParam) {
      this.singletonC = singletonC;


    }
  }

  private static final class SwitchingProvider<T> implements Provider<T> {
    private final DaggerKBikeApplication_HiltComponents_SingletonC singletonC;

    private final int id;

    SwitchingProvider(DaggerKBikeApplication_HiltComponents_SingletonC singletonC, int id) {
      this.singletonC = singletonC;
      this.id = id;
    }

    @SuppressWarnings("unchecked")
    @Override
    public T get() {
      switch (id) {
        case 0: // com.goldcompany.apps.koreabike.data.KBikeRepository 
        return (T) singletonC.kBikeRepository();

        case 1: // com.goldcompany.apps.koreabike.data.KBikeRemoteDataSource 
        return (T) singletonC.kBikeRemoteDataSource();

        case 2: // com.goldcompany.apps.koreabike.api.KakaoApiService 
        return (T) NetworkModule_ProvideKakaoApiServiceFactory.provideKakaoApiService(singletonC.networkModule);

        case 3: // com.goldcompany.apps.koreabike.api.NaverApiService 
        return (T) NetworkModule_ProvideNaverApiServiceFactory.provideNaverApiService(singletonC.networkModule);

        case 4: // com.goldcompany.apps.koreabike.data.KBikeLocalDataSource 
        return (T) singletonC.kBikeLocalDataSource();

        case 5: // com.goldcompany.apps.koreabike.db.KBikeDatabase 
        return (T) singletonC.kBikeDatabase();

        default: throw new AssertionError(id);
      }
    }
  }
}
